<style>
 html, body {
     margin: 0;
     padding: 0;
 }
 body {
     background-color: black;
     height: 100%;
     width: 100%;
     box-sizing: border-box;
     color: white;
     font-family: sans-serif;
 }
 .container {
     font-family: Lato, sans-serif;
     font-size: 2rem;
 }
 .column {
     display: flex;
     justify-content: center;
     align-items: center;
 }
 .column h2 {
     font-family: 'VT323', Verdana, sans-serif;
     font-size: 5rem;
 }
 .column h2 img {
     margin-left: 10px;
     position: relative;
     bottom: -5px;
 }
 .dos-buttons {
     margin-bottom: 100px;
 }
 /* for icons */
 .dos-buttons img {
   position: relative;
   bottom: -2px;
   left: -5px;
 }
 .img-star {
     position: absolute;
 }
 #yo {
     text-align: center;
     font-family: 'VT323', Verdana, sans-serif;
     font-size: 5rem;
     margin-top: 3em;
     margin-bottom: 1.5em;
 }
 .vertical-flex-column {
     display: flex;
     flex-direction: column;
     justify-content: center;
     align-items: center;
 }
 .split-container {
     text-align: center;
 }
 #rubiks {
     position: absolute;
     top: 10vh;
     left: 10vw;
 }
 #rubiks img {
   width: 10vw;
   height: auto;
 }
</style>
<div id="elm"></div>
    <a id="rubiks" href="/cubing">
        <img src="<%= Routes.static_path(@conn, "/images/rubiks.gif") %>" alt="cubing"/>
    </a>
<div class="container">
    <div id="yo">yo</div>
    <div class="row split-container">
        <div class="one-half column">
            <div class="vertical-flex-column">
                <h2>
                    stuff here
                    <img class="spinning-home" src="<%= Routes.static_path(@conn, "/images/home.gif") %>" alt="home">
                </h2>
                <div class="dos-buttons">
                    <%= for {rel_url, button_title} <- @data.here do %>
                        <a class="table-row" href="<%= rel_url %>"><span class="table-cell"><%= button_title %></span></a>
                    <% end %>
                </div>
            </div>
        </div>
        <div class="one-half column">
            <div class="vertical-flex-column">
                <h2>
                    me elsewhere
                    <img class="smile" src="<%=  Routes.static_path(@conn, "/images/globe.gif") %>" alt="globe">
                </h2>
                <div class="dos-buttons">
                    <%= for {abs_url, button_title, icon_path} <- @data.elsewhere do %>
                        <a class="table-row" rel="me" href="<%= abs_url %>"><span class="table-cell"><img src="<%= Routes.static_path(@conn, icon_path) %>" alt="" /><%= button_title %></span></a>
                    <% end %>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="<%= Routes.static_path(@conn, "/js/stars.js") %>"></script>
<script>
 // elm port implementation modified from https://github.com/lucamug/elm-scroll-resize-events
 //  keep refrences to html variables
 var _window = window;
 _window.elmRef = _window.elmRef || {};
 _window.elmRef.elmPortConn = (function(_window) {
     var _document = _window.document;
     var _body = _document.body;
     var _html = _document.documentElement;
     var app;

     // sends the record off to elm
     var processScrollOrResize = function() {
         app.ports.scrollOrResize.send({
             // how far we've scrolled down on the page
             scrollY: parseInt(_window.scrollY),
             // https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight
             // When clientHeight is used on the root element (the <html> element), (or on <body> if the document is in quirks mode), the viewport's height (excluding any scrollbar) is returned.  This is a special case of clientHeight.
             viewportHeight: parseInt(_html.clientHeight),
             viewportWidth: parseInt(_html.clientWidth),
         });
     }

     var scrollTimer = null;
     var lastScrollFireTime = 0;
     var minScrollTime = 1000; // can increase this since the stars are only going to be drawn every few seconds
     var scrolledOrResized = function() {
         if (scrollTimer) {} else {
             var now = new Date().getTime();
             if (now - lastScrollFireTime > (3 * minScrollTime)) {
                 processScrollOrResize();
                 lastScrollFireTime = now;
             }
             scrollTimer = setTimeout(function() {
                 scrollTimer = null;
                 lastScrollFireTime = new Date().getTime();
             }, minScrollTime);
         }
     };

     var main = function(initFlags) {
         app = Elm.Stars.init({
             node: document.getElementById("elm"),
             flags: initFlags
         });
         _window.addEventListener('scroll', scrolledOrResized);
         _window.addEventListener('resize', scrolledOrResized);
         scrolledOrResized() // initial call to send data to Elm
     };

     return {
         main: main,
     };
 })(_window);
 _window.elmRef.elmPortConn.main({
     starUrls: [
         <%= for i <- 1..9 do %>
         "<%= Routes.static_path(@conn, "/images/star#{i}.png") %>",
         <% end %>
     ],
     randomNumbers: Array(100).fill().map(() => Math.random()),
     defaultRandom: Math.random()
 });
</script>
<script type="text/javascript" src="<%= Routes.static_path(@conn, "/js/app.js") %>"></script>
